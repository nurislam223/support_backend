from fastapi import Depends, HTTPException, Request
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials
import jwt
from jwt.exceptions import JWTError

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ö–µ–º—É Bearer —Ç–æ–∫–µ–Ω–∞
bearer_scheme = HTTPBearer()

# –ü—Ä–∏–º–µ—Ä –ë–î (–∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é)
fake_users_db = {
    "admin": {"username": "admin", "password": "secret"}
}

# –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –∏ –∞–ª–≥–æ—Ä–∏—Ç–º
SECRET_KEY = "your-secret-key"
ALGORITHM = "HS256"

def get_current_user(
    request: Request,  # –î–æ–±–∞–≤–ª—è–µ–º request, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —é–∑–µ—Ä–∞ –≤ state
    token: HTTPAuthorizationCredentials = Depends(bearer_scheme)
):
    try:
        payload = jwt.decode(token.credentials, SECRET_KEY, algorithms=[ALGORITHM])
        username: str = payload.get("sub")
        if username is None:
            raise HTTPException(status_code=401, detail="Invalid token")
        
        user = fake_users_db.get(username)
        if not user:
            raise HTTPException(status_code=401, detail="User not found")
        
        # üí° –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ request.state –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        request.state.user = user
        
        return user
    except JWTError:
        raise HTTPException(status_code=401, detail="Invalid token")
    
def authenticate_user(username: str, password: str):
    user = fake_users_db.get(username)
    if not user or user["password"] != password:
        return False
    return user